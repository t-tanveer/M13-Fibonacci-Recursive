
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/* Programmer: Tayyaab Tanveer
 * Date: May 1 2018
 * Name of Program: Fibonacci Recursive Program
 * This program is designed to take user input as a long variable and find that term in the fibonacci sequence. The user can also find a random term between the 0-20th terms by pressing random.
 * This program relies on recursive functions to find the nth term of the fibonacci sequence.
 */
public class FibonacciRecursive extends javax.swing.JFrame {

    /** Creates new form FibonacciRecursive */
    public FibonacciRecursive() {
        initComponents();
        //pink background
        getContentPane().setBackground(Color.pink);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        promptLabel = new javax.swing.JLabel();
        termInput = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        output = new javax.swing.JTextField();
        titleLabel = new javax.swing.JLabel();
        randomButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        fibImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        promptLabel.setFont(new java.awt.Font("NSimSun", 1, 12)); // NOI18N
        promptLabel.setText("Enter the fibonacci term you want to see:");

        termInput.setFont(new java.awt.Font("NSimSun", 0, 12)); // NOI18N
        termInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                termInputKeyTyped(evt);
            }
        });

        findButton.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        findButton.setForeground(new java.awt.Color(0, 102, 204));
        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        output.setBackground(new java.awt.Color(204, 255, 204));
        output.setEditable(false);
        output.setFont(new java.awt.Font("Cambria Math", 1, 12)); // NOI18N

        titleLabel.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(0, 102, 255));
        titleLabel.setText("Finding Fibonacci Numbers");

        randomButton.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        randomButton.setForeground(new java.awt.Color(255, 0, 51));
        randomButton.setText("Random");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        exitButton.setForeground(new java.awt.Color(153, 0, 153));
        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        fibImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/220px-PascalTriangleFibanacci.svg.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(titleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(promptLabel)
                                    .addComponent(fibImage))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(findButton)
                                .addGap(24, 24, 24)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(randomButton, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(termInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(output, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(342, Short.MAX_VALUE)
                .addComponent(exitButton)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(fibImage)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promptLabel)
                    .addComponent(termInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomButton)
                    .addComponent(findButton))
                .addGap(18, 18, 18)
                .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // try to take user input as long variable
        try {
            long n = Integer.parseInt(termInput.getText());

            //call function with this variable
            long fibonacciNumber = fibonacci(n);
            //output
            output.setText("Fibonacci Number " + n + " is: " + fibonacciNumber);

            //show popup to inform user to fix input if catch is found.
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please input valid whole number!");
        }
        //clear input field
        termInput.setText("");
    }//GEN-LAST:event_findButtonActionPerformed

    private void termInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_termInputKeyTyped
        char typed = evt.getKeyChar();
        // if the keypress is not one of those listed in this if statement
        if (!(Character.isDigit(typed) || (typed == KeyEvent.VK_BACK_SPACE) || (typed == KeyEvent.VK_DELETE))) {
            //The input will be consumed and background will become red to alert the user.
            evt.consume();
            termInput.setBackground(Color.RED);
            //otherwise, the background will be yellow and the input will be taken.
        } else {
            termInput.setBackground(Color.YELLOW);
        }
    }//GEN-LAST:event_termInputKeyTyped

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        //generate random long number
        long n = (long) (Math.random() * 20) + 1;

        // call fibonnacci function with this number
        long fibonacciNumber = fibonacci(n);
        //output
        output.setText("Fibonacci Number " + n + " is: " + fibonacciNumber);
        //clear Input field
        termInput.setText("");
    }//GEN-LAST:event_randomButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        //exit program
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FibonacciRecursive().setVisible(true);
                //popup to explain how to use program
                JOptionPane.showMessageDialog(null, "Please input the fibonacci term you wish to find or click random to learn a random term between 0 and 20!");
            }
        });
    }
// creating a function recursive called fibonacci which takes the index/term of fibonacci sequence as parameter
    static public long fibonacci(long n) {
        //if index is 1 or 2 then the fibonacci number is 1
        if ((n == 1 || n == 2)) {
            return 1;
        }
        //if index is 0 then fibonacci number is 0.
        if (n == 0) {
            return n;
            //otherwise it will call the fibonacci function of n-1 and n-2 and add them together. This will eventually bring it back to n==1 and n==2 from there the recursive program will be able to calculate and find the nth fibonacci number.
        } else {
            return (fibonacci(n - 1) + fibonacci(n - 2));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel fibImage;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField output;
    private javax.swing.JLabel promptLabel;
    private javax.swing.JButton randomButton;
    private javax.swing.JTextField termInput;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
